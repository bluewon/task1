//
//  ForgotViewController.swift
//  task1
//
//  Created Quan Tran on 7/2/17.
//  Copyright Â© 2017 Quan Tran. All rights reserved.
//
//  Template generated by Hao Nguyen
//

import UIKit

class ForgotViewController: UIViewController, ForgotViewProtocol, UITextFieldDelegate, UIScrollViewDelegate {
    // MARK: - OBJECT PRESENTER
	var presenter: ForgotPresenterProtocol?
    var dateFormate = Bool()
    var s:String?
    // MARK: - OBJECT IN VIEW
    let screenSizeHeight = UIScreen.main.bounds.height
    let screenSizeWidth = UIScreen.main.bounds.width

    let scrollView: UIScrollView = UIScrollView()
    let imageView: UIImageView = UIImageView(image: UIImage(named: "BG"))
    let viewForgotPass:UIView = UIView()
    let viewForgotUsername:UIView = UIView()
    let imgClose:UIImageView = UIImageView(image: UIImage(named: "Close"))
    let lblPass:UILabel = UILabel()

    let imgUser = UIImageView(image: UIImage(named: "user"))
    let txtUser = UITextField()
    let viewBotUser = UIView()
    let lblError1 = UILabel()

    let rdbMobile = LTHRadioButton(selectedColor: #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1))
    let lblRdbMobile = UILabel()
    let rdbEmail = LTHRadioButton(selectedColor: #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1))
    let lblRdbEmail = UILabel()

    let imgProtocol = UIImageView(image: UIImage(named: "smartphone (1)"))
    let txtProtocol = UITextField()
    let viewBotProtocol = UIView()
    let lblError2 = UILabel()

    let imgNext = UIImageView(image: UIImage(named: "btn_next"))

    let imgSubmit = UIImageView(image: UIImage(named: "btn_white"))

    let lblUser = UILabel()
    let imgClose2 = UIImageView(image: UIImage(named: "Close"))

    let imgNumCard = UIImageView(image: UIImage(named: "id-card"))
    let txtNumCard = UITextField()
    let viewBotNumCard = UIView()
    let lblError3 = UILabel()

    let imgBirthday = UIImageView(image: UIImage(named: "Shape"))
    let txtCalendar = UITextField()
    let viewBotCalendar = UIView()

        let datePicker:UIDatePicker = UIDatePicker()

    let rdbMobile2 = LTHRadioButton(selectedColor: #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1))
    let lblRdbMobile2 = UILabel()
    let rdbEmail2 = LTHRadioButton(selectedColor: #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1))
    let lblRdbEmail2 = UILabel()

    let imgProtocol2 = UIImageView(image: UIImage(named: "smartphone (1)"))
    let txtProtocol2 = UITextField()
    let viewBotProtocol2 = UIView()
    let lblError4 = UILabel()

    let imgNext2 = UIImageView(image: UIImage(named: "btn_next"))

    let imgSubmit2 = UIImageView(image: UIImage(named: "btn_white"))
    //View success
    let imgPopupScroll = UIImageView()
    //
    let viewNew = UIView()
    let imgSuccessPass = UIImageView()
    let imgBackLogin = UIImageView()

    let viewNew2 = UIView()
    let imgSuccessUser = UIImageView()
    let imgBackLogin2 = UIImageView()
    let viewShadow = UIView()
    // MARK: - LIFE CYCLE
    override func viewDidAppear(_ animated: Bool) {
        self.navigationController?.isNavigationBarHidden = true
    }
//    func printFonts() {
//        let fontFamilyNames = UIFont.familyNames
//        for familyName in fontFamilyNames {
//            print("------------------------------")
//            print("Font Family Name = [\(familyName)]")
//            let names = UIFont.fontNames(forFamilyName: familyName )
//            print("Font Names = [\(names)]")
//        }
//    }
    override func viewDidLoad() {
        super.viewDidLoad()
        //printFonts()
        txtUser.delegate = self
        txtProtocol.delegate = self
        txtNumCard.delegate = self
        txtProtocol2.delegate = self
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tap)
        setupScrollView()
        setupImageView()

        setupViewForgotPass()
        setupViewForgotUserName()
        setupBtnClose()
        setupLblPass()

        setupImgUser()
        setupTxtUser()
        setupViewBotUser()
        setupLblError1()

        setupRdbMobile()
        setupLblRdbMobile()
        setupRdbEmail()
        setupLblRdbEmail()

        setupTxtProtocol()
        setupImgProtocol()
        setupViewBotProtocol()
        setupLblError2()
        setupImgNext()
        setupImgSubmit()

        setupLblUser()
        setupImgClose2()

        setupImgNumCard()
        setupTxtNumCard()
        setupViewBotNumCard()
        setupLblError3()

        setupImgBirthday()
        setupTxtClendar()
        setupViewBotCalendar()

        setupRdbMobile2()
        setupLblRdbMobile2()
        setupRdbEmail2()
        setupLblRdbEmail2()

        setupImgProtocol2()
        setupTxtProtocol2()
        setupViewBotProtocol2()
        setupLblError4()

        setupImgNext2()

        setupImgSubmit2()
        //
        setupImgPopScroll()
    }

    // MARK: - FUNC SETUP OBJECT IN VIEW
    func setupImageView(){

        imageView.contentMode = .scaleToFill
        scrollView.addSubview(imageView)
        imageView.translatesAutoresizingMaskIntoConstraints = false

        imageView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 1).isActive = true
        imageView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 1).isActive = true
        imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        imageView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
    }
    func setupScrollView(){
        scrollView.isPagingEnabled = true
        scrollView.bounces = false
        //scrollView.isScrollEnabled = false
        scrollView.showsVerticalScrollIndicator = false
        view.addSubview(scrollView)
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.contentSize = CGSize(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height*1.7005)
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 1).isActive = true
        scrollView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 1).isActive = true
        scrollView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        scrollView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        scrollView.delegate = self

    }
    func setupImgPopScroll() {
            imgPopupScroll.isHidden = true
            imgPopupScroll.image = #imageLiteral(resourceName: "popScroll")
            imgPopupScroll.translatesAutoresizingMaskIntoConstraints = false
            viewForgotPass.addSubview(imgPopupScroll)

            imgPopupScroll.centerXAnchor.constraint(equalTo: viewForgotPass.centerXAnchor).isActive = true
            imgPopupScroll.bottomAnchor.constraint(equalTo: viewForgotPass.bottomAnchor, constant: -0.019836*screenSizeHeight).isActive = true
            imgPopupScroll.widthAnchor.constraint(equalToConstant: 0.04932*screenSizeWidth).isActive = true
            imgPopupScroll.heightAnchor.constraint(equalToConstant: 0.01725543*screenSizeHeight).isActive = true
            //
        let click = UITapGestureRecognizer(target: self, action: #selector(popScrollView))
        click.numberOfTapsRequired = 1
        imgPopupScroll.isUserInteractionEnabled = true
        imgPopupScroll.addGestureRecognizer(click)

    }

    func setupViewForgotPass(){
        scrollView.addSubview(viewForgotPass)
        viewForgotPass.layer.masksToBounds = false
        viewForgotPass.layer.shadowOffset = CGSize(width: 2, height: 6)
        viewForgotPass.layer.shadowRadius = 1.1
        viewForgotPass.layer.shadowOpacity = 0.045
        viewForgotPass.layer.shadowColor = UIColor.black.cgColor


        viewForgotPass.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
        viewForgotPass.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true

        viewForgotPass.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: UIScreen.main.bounds.height*0.04274).isActive = true
        viewForgotPass.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.86667).isActive = true
        viewForgotPass.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.71625).isActive = true


    }
    func setupViewForgotUserName(){
        scrollView.addSubview(viewForgotUsername)
        viewForgotUsername.layer.masksToBounds = false
        viewForgotUsername.layer.shadowOffset = CGSize(width: 2, height: 6)
        viewForgotUsername.layer.shadowRadius = 1.1
        viewForgotUsername.layer.shadowOpacity = 0.045
        viewForgotUsername.layer.shadowColor = UIColor.black.cgColor
        viewForgotUsername.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
        viewForgotUsername.translatesAutoresizingMaskIntoConstraints = false
        viewForgotUsername.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        viewForgotUsername.topAnchor.constraint(equalTo: viewForgotPass.bottomAnchor, constant: UIScreen.main.bounds.height*0.0180027).isActive = true
        viewForgotUsername.widthAnchor.constraint(equalTo: viewForgotPass.widthAnchor, multiplier:1).isActive = true
        viewForgotUsername.heightAnchor.constraint(equalTo: viewForgotPass.heightAnchor, multiplier: 1).isActive = true
        viewForgotUsername.isUserInteractionEnabled = true

    }
    func setupBtnClose(){
        imgClose.contentMode = .scaleToFill
        viewForgotPass.addSubview(imgClose)
        imgClose.translatesAutoresizingMaskIntoConstraints = false

        imgClose.topAnchor.constraint(equalTo: viewForgotPass.topAnchor, constant: UIScreen.main.bounds.width*0.86667*0.046128).isActive = true

        imgClose.rightAnchor.constraint(equalTo: viewForgotPass.rightAnchor, constant: -UIScreen.main.bounds.width*0.86667*0.046128).isActive = true
        imgClose.widthAnchor.constraint(equalTo: viewForgotPass.widthAnchor, multiplier: 0.038997).isActive = true
        imgClose.heightAnchor.constraint(equalTo: viewForgotPass.widthAnchor, multiplier: 0.038997).isActive = true




    }
    func setupLblPass(){
        lblPass.adjustsFontSizeToFitWidth = true
        lblPass.baselineAdjustment = .alignCenters
        lblPass.textAlignment = .center
        lblPass.text = "FORGOT PASSWORD"
        lblPass.font = UIFont(name: "OpenSans-Semibold", size: 18)
        lblPass.translatesAutoresizingMaskIntoConstraints = false
        lblPass.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        viewForgotPass.addSubview(lblPass)

        lblPass.topAnchor.constraint(equalTo: viewForgotPass.topAnchor, constant: 0.072758*screenSizeHeight).isActive = true
        lblPass.centerXAnchor.constraint(equalTo: viewForgotPass.centerXAnchor).isActive = true
        lblPass.heightAnchor.constraint(equalToConstant: 0.0555*screenSizeHeight).isActive = true

        lblPass.widthAnchor.constraint(equalToConstant: 0.4686*screenSizeWidth).isActive = true
    }
    func setupImgUser(){
        imgUser.contentMode = .scaleToFill
        imgUser.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(imgUser)

        imgUser.topAnchor.constraint(equalTo: viewForgotPass.topAnchor, constant: screenSizeHeight*0.1942).isActive = true
        imgUser.leftAnchor.constraint(equalTo: viewForgotPass.leftAnchor, constant: screenSizeWidth*0.0985).isActive = true
        imgUser.widthAnchor.constraint(equalTo: viewForgotPass.widthAnchor, multiplier: 0.04178).isActive = true
        imgUser.heightAnchor.constraint(equalTo: viewForgotPass.heightAnchor, multiplier: 0.0335).isActive = true
    }
    func setupTxtUser(){
        txtUser.placeholder = "Username"
        txtUser.borderStyle = .none
        txtUser.clearButtonMode = .whileEditing
        txtUser.keyboardType = .emailAddress
        txtUser.font = UIFont(name: "OpenSans", size: 15)
        viewForgotPass.addSubview(txtUser)
        txtUser.translatesAutoresizingMaskIntoConstraints = false
        txtUser.topAnchor.constraint(equalTo: viewForgotPass.topAnchor, constant: screenSizeHeight*0.17255).isActive = true
        txtUser.leftAnchor.constraint(equalTo: viewForgotPass.leftAnchor, constant: 0.1678*screenSizeWidth).isActive = true
        txtUser.widthAnchor.constraint(equalToConstant: 0.6*screenSizeWidth).isActive = true
        txtUser.heightAnchor.constraint(equalToConstant: 0.05706*screenSizeHeight).isActive = true
        txtUser.addTarget(self, action: #selector(setView), for: UIControlEvents.editingChanged)
        txtUser.addTarget(self, action: #selector(setNext), for: UIControlEvents.editingDidBegin)
        txtUser.addTarget(self, action: #selector(done), for: UIControlEvents.editingDidEnd)

    }



    func setupViewBotUser(){
        viewBotUser.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.2)
        viewForgotPass.addSubview(viewBotUser)
        viewBotUser.translatesAutoresizingMaskIntoConstraints = false
        viewBotUser.centerXAnchor.constraint(equalTo: txtUser.centerXAnchor).isActive = true
        viewBotUser.topAnchor.constraint(equalTo: txtUser.bottomAnchor, constant: 0).isActive = true
        viewBotUser.widthAnchor.constraint(equalTo: txtUser.widthAnchor, multiplier: 1).isActive = true
        viewBotUser.heightAnchor.constraint(equalToConstant: 0.552).isActive = true

    }

    func setupLblError1(){
        lblError1.adjustsFontSizeToFitWidth = true
        lblError1.text = "Error Username"
        lblError1.isHidden = true
        lblError1.textColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        lblError1.font = UIFont(name: "OpenSans", size: 11)
        lblError1.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(lblError1)
        lblError1.topAnchor.constraint(equalTo: viewBotUser.bottomAnchor, constant: screenSizeHeight*0.011).isActive = true
        lblError1.leadingAnchor.constraint(equalTo: viewBotUser.leadingAnchor).isActive = true
        lblError1.widthAnchor.constraint(equalToConstant: 120).isActive = true
        lblError1.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.022488755622189).isActive = true

    }

    func setupRdbMobile(){
        viewForgotPass.addSubview(rdbMobile)
        rdbMobile.select(animated: true)
        rdbMobile.translatesAutoresizingMaskIntoConstraints = false
        rdbMobile.topAnchor.constraint(equalTo: viewBotUser.bottomAnchor, constant: 0.06675*screenSizeHeight).isActive = true
        rdbMobile.leadingAnchor.constraint(equalTo: viewForgotPass.leadingAnchor, constant: 0.09867*screenSizeWidth).isActive = true
        rdbMobile.widthAnchor.constraint(equalToConstant: 0.0483*screenSizeWidth).isActive = true
        rdbMobile.heightAnchor.constraint(equalToConstant: 0.0483*screenSizeWidth).isActive = true
            //
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbMobile))
        click.numberOfTapsRequired = 1
        rdbMobile.isUserInteractionEnabled = true
        rdbMobile.addGestureRecognizer(click)
    }

    func setupLblRdbMobile(){
        lblRdbMobile.text = "Mobile phone"
        lblRdbMobile.adjustsFontSizeToFitWidth = true
        lblRdbMobile.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        lblRdbMobile.textAlignment = .center
        lblRdbMobile.font = UIFont(name: "OpenSans-Semibold", size: 11)
        lblRdbMobile.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(lblRdbMobile)

        lblRdbMobile.topAnchor.constraint(equalTo: viewBotUser.bottomAnchor, constant: 0.06675*screenSizeHeight).isActive = true
        lblRdbMobile.leadingAnchor.constraint(equalTo: lblError1.leadingAnchor).isActive = true
        lblRdbMobile.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.1884).isActive = true
        lblRdbMobile.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.0219).isActive = true
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbMobile))
        click.numberOfTapsRequired = 1
        lblRdbMobile.isUserInteractionEnabled = true
        lblRdbMobile.addGestureRecognizer(click)
    }
    func setupLblRdbEmail(){
        lblRdbEmail.text = "Email"
        lblRdbEmail.textColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.3049871575)

        lblRdbEmail.textAlignment = .center
        lblRdbEmail.adjustsFontSizeToFitWidth = true
        lblRdbEmail.font = UIFont(name: "OpenSans", size: 11)
        lblRdbEmail.translatesAutoresizingMaskIntoConstraints = false

        viewForgotPass.addSubview(lblRdbEmail)

        lblRdbEmail.centerYAnchor.constraint(equalTo: rdbEmail.centerYAnchor).isActive = true
        lblRdbEmail.leftAnchor.constraint(equalTo: rdbEmail.rightAnchor, constant: 0.0213285*screenSizeWidth).isActive = true
        lblRdbEmail.widthAnchor.constraint(equalToConstant: 0.074879*screenSizeWidth).isActive = true
        lblRdbEmail.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.02).isActive = true
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbEmail))
        click.numberOfTapsRequired = 1
        lblRdbEmail.isUserInteractionEnabled = true
        lblRdbEmail.addGestureRecognizer(click)
    }

    func setupRdbEmail(){
        viewForgotPass.addSubview(rdbEmail)
        rdbEmail.translatesAutoresizingMaskIntoConstraints = false
        rdbEmail.centerYAnchor.constraint(equalTo: lblRdbMobile.centerYAnchor).isActive = true
        rdbEmail.trailingAnchor.constraint(equalTo: lblRdbMobile.trailingAnchor, constant: 0.076932367149758*screenSizeWidth).isActive = true
        rdbEmail.widthAnchor.constraint(equalToConstant: 0.0483*screenSizeWidth).isActive = true
        rdbEmail.heightAnchor.constraint(equalToConstant: 0.0483*screenSizeWidth).isActive = true
            //
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbEmail))
        click.numberOfTapsRequired = 1
        rdbEmail.isUserInteractionEnabled = true
        rdbEmail.addGestureRecognizer(click)

    }

    func setupImgProtocol(){
        imgProtocol.contentMode = .scaleToFill
        imgProtocol.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(imgProtocol)

        imgProtocol.centerYAnchor.constraint(equalTo: txtProtocol.centerYAnchor).isActive = true
        imgProtocol.leadingAnchor.constraint(equalTo: imgUser.leadingAnchor).isActive = true
        imgProtocol.widthAnchor.constraint(equalTo: scrollView.widthAnchor, multiplier: 0.02626).isActive = true
        imgProtocol.heightAnchor.constraint(equalTo: scrollView.heightAnchor, multiplier: 0.0255).isActive = true
    }
    func setupTxtProtocol(){

        txtProtocol.borderStyle = .none
        txtProtocol.keyboardType = .phonePad
        txtProtocol.clearButtonMode = .whileEditing
        txtProtocol.placeholder = "Mobile phone"
        txtProtocol.font = UIFont(name: "OpenSans", size: 15)
        viewForgotPass.addSubview(txtProtocol)
        txtProtocol.translatesAutoresizingMaskIntoConstraints = false
        txtProtocol.topAnchor.constraint(equalTo: viewBotUser.bottomAnchor, constant: 0.11057*screenSizeHeight).isActive = true
        txtProtocol.leadingAnchor.constraint(equalTo: txtUser.leadingAnchor).isActive = true
        txtProtocol.widthAnchor.constraint(equalTo: txtUser.widthAnchor).isActive = true
        txtProtocol.heightAnchor.constraint(equalTo: txtUser.heightAnchor).isActive = true
        txtProtocol.addTarget(self, action: #selector(setView2), for: UIControlEvents.editingChanged)
        txtProtocol.addTarget(self, action: #selector(setNext), for: UIControlEvents.editingDidBegin)
        txtProtocol.addTarget(self, action: #selector(done), for: UIControlEvents.editingDidEnd)
    }

    func setupViewBotProtocol(){

        viewBotProtocol.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.2)
        viewForgotPass.addSubview(viewBotProtocol)
        viewBotProtocol.translatesAutoresizingMaskIntoConstraints = false
        viewBotProtocol.centerXAnchor.constraint(equalTo: txtProtocol.centerXAnchor).isActive = true
        viewBotProtocol.topAnchor.constraint(equalTo: txtProtocol.bottomAnchor, constant: 0).isActive = true
        viewBotProtocol.widthAnchor.constraint(equalTo: txtProtocol.widthAnchor, multiplier: 1).isActive = true
        viewBotProtocol.heightAnchor.constraint(equalToConstant: 0.552).isActive = true
    }

    func setupLblError2(){
        //lblError2.adjustsFontSizeToFitWidth = true
        lblError2.text = "Error message"
        lblError2.isHidden = true
        lblError2.textColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        lblError2.font = UIFont(name: "OpenSans", size: 11)
        lblError2.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(lblError2)
        lblError2.topAnchor.constraint(equalTo: viewBotProtocol.bottomAnchor, constant: screenSizeHeight*0.011).isActive = true
        lblError2.leadingAnchor.constraint(equalTo: viewBotProtocol.leadingAnchor).isActive = true
        lblError2.widthAnchor.constraint(equalToConstant: 150).isActive = true
        lblError2.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.022488755622189).isActive = true
    }

    func setupImgNext(){
        imgNext.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(imgNext)
        imgNext.isHidden = true
        imgNext.contentMode = .scaleToFill
        imgNext.topAnchor.constraint(equalTo: viewBotProtocol.bottomAnchor, constant: 0.08259*screenSizeHeight).isActive = true
        imgNext.rightAnchor.constraint(equalTo: viewForgotPass.rightAnchor, constant: -screenSizeWidth*0.0409).isActive = true
        imgNext.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.133381).isActive = true
        imgNext.heightAnchor.constraint(equalToConstant: screenSizeWidth*0.133381).isActive = true
        //set Action Touch up inside
        let hold  = UILongPressGestureRecognizer(target: self, action: #selector(holdNext))
        hold.numberOfTouchesRequired = 1
        hold.minimumPressDuration = 0.01
        imgNext.isUserInteractionEnabled = true
        imgNext.addGestureRecognizer(hold)
    }

    func setupImgSubmit(){
        imgSubmit.translatesAutoresizingMaskIntoConstraints = false
        viewForgotPass.addSubview(imgSubmit)
        imgSubmit.contentMode = .scaleAspectFit

        imgSubmit.centerXAnchor.constraint(equalTo: viewForgotPass.centerXAnchor).isActive = true
        imgSubmit.bottomAnchor.constraint(equalTo: viewForgotPass.bottomAnchor, constant: -0.04*screenSizeHeight).isActive = true
        imgSubmit.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.0679).isActive = true
        imgSubmit.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.7343).isActive = true
        let hold  = UILongPressGestureRecognizer(target: self, action: #selector(holdSubmit))
        hold.numberOfTouchesRequired = 1
        hold.minimumPressDuration = 0.01
        imgSubmit.isUserInteractionEnabled = true
        imgSubmit.addGestureRecognizer(hold)

    }

    func setupLblUser(){
        lblUser.baselineAdjustment = .alignCenters
        lblUser.text = "FORGOT USERNAME"
        lblUser.textAlignment = .center
        lblUser.adjustsFontSizeToFitWidth = true
        lblUser.font = UIFont(name: "OpenSans-Semibold", size: 18)
        lblUser.translatesAutoresizingMaskIntoConstraints = false
        lblUser.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        viewForgotUsername.addSubview(lblUser)

        lblUser.leftAnchor.constraint(equalTo: viewForgotUsername.leftAnchor, constant: 0.20386*screenSizeWidth).isActive = true
        lblUser.topAnchor.constraint(equalTo: viewForgotUsername.topAnchor, constant: 0.0375*screenSizeHeight).isActive = true
        lblUser.rightAnchor.constraint(equalTo: viewForgotUsername.rightAnchor, constant: -0.20145*screenSizeWidth).isActive = true
        lblUser.heightAnchor.constraint(equalToConstant: 0.031*screenSizeHeight).isActive = true

    }
    func setupImgClose2(){
        viewForgotUsername.addSubview(imgClose2)
        imgClose2.translatesAutoresizingMaskIntoConstraints = false
        imgClose2.contentMode = .scaleToFill
        imgClose2.topAnchor.constraint(equalTo: viewForgotUsername.topAnchor, constant: UIScreen.main.bounds.width*0.86667*0.046128).isActive = true

        imgClose2.rightAnchor.constraint(equalTo: viewForgotUsername.rightAnchor, constant: -UIScreen.main.bounds.width*0.86667*0.046128).isActive = true
        imgClose2.widthAnchor.constraint(equalTo: viewForgotUsername.widthAnchor, multiplier: 0.038997).isActive = true
        imgClose2.heightAnchor.constraint(equalTo: viewForgotUsername.widthAnchor, multiplier: 0.038997).isActive = true

    }

    func setupImgNumCard(){
        viewForgotUsername.addSubview(imgNumCard)
        imgNumCard.translatesAutoresizingMaskIntoConstraints = false
        imgNumCard.contentMode = .scaleToFill

        imgNumCard.topAnchor.constraint(equalTo: viewForgotUsername.topAnchor, constant: screenSizeHeight*0.1402445).isActive = true
        imgNumCard.leftAnchor.constraint(equalTo: viewForgotUsername.leftAnchor, constant: screenSizeWidth*0.09867).isActive = true
        imgNumCard.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.04).isActive = true
        imgNumCard.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.02).isActive = true
    }
    func setupTxtNumCard(){
        txtNumCard.borderStyle = .none
        viewForgotUsername.addSubview(txtNumCard)
        txtNumCard.placeholder = "CMND"
        txtNumCard.font = UIFont(name: "OpenSans", size: 15)
        txtNumCard.keyboardType = .numberPad
        txtNumCard.clearButtonMode = .whileEditing
        txtNumCard.translatesAutoresizingMaskIntoConstraints = false
        txtNumCard.clearButtonMode = .whileEditing
        txtNumCard.endEditing(true)
        txtNumCard.topAnchor.constraint(equalTo: viewForgotUsername.topAnchor, constant: screenSizeHeight*0.1167916).isActive = true
        txtNumCard.leftAnchor.constraint(equalTo: imgNumCard.rightAnchor, constant: screenSizeWidth*0.0293).isActive = true
        txtNumCard.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.56).isActive = true
        txtNumCard.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.057).isActive = true

        txtNumCard.addTarget(self, action: #selector(showNextButton), for: UIControlEvents.editingDidBegin)

        txtNumCard.addTarget(self, action: #selector(editingChangeOffError), for: UIControlEvents.editingChanged)
        txtNumCard.addTarget(self, action: #selector(done2), for: UIControlEvents.editingDidEnd)

    }

    func setupViewBotNumCard(){
        viewBotNumCard.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.2)
        viewForgotUsername.addSubview(viewBotNumCard)
        viewBotNumCard.translatesAutoresizingMaskIntoConstraints = false

        viewBotNumCard.centerXAnchor.constraint(equalTo: txtNumCard.centerXAnchor).isActive = true
        viewBotNumCard.topAnchor.constraint(equalTo: viewForgotUsername.topAnchor, constant: 0.1725*screenSizeHeight).isActive = true
        viewBotNumCard.widthAnchor.constraint(equalTo: txtNumCard.widthAnchor, multiplier: 1).isActive = true
        viewBotNumCard.heightAnchor.constraint(equalToConstant: 0.552).isActive = true

    }
    func setupLblError3(){
        lblError3.adjustsFontSizeToFitWidth = true
        lblError3.text = "Error License"
        lblError3.isHidden = true
        lblError3.textColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        lblError3.font = UIFont(name: "OpenSans", size: 11)
        lblError3.translatesAutoresizingMaskIntoConstraints = false
        viewForgotUsername.addSubview(lblError3)

        lblError3.topAnchor.constraint(equalTo: viewBotNumCard.bottomAnchor, constant: screenSizeHeight*0.011).isActive = true
        lblError3.leadingAnchor.constraint(equalTo: viewBotNumCard.leadingAnchor).isActive = true
        lblError3.widthAnchor.constraint(equalToConstant: 120).isActive = true
        lblError3.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.022488755622189).isActive = true
    }

    func setupImgBirthday(){
        viewForgotUsername.addSubview(imgBirthday)
        imgBirthday.translatesAutoresizingMaskIntoConstraints = false
        imgBirthday.contentMode = .scaleToFill

        imgBirthday.topAnchor.constraint(equalTo: imgNumCard.bottomAnchor, constant: screenSizeHeight*0.0885).isActive = true
        imgBirthday.leftAnchor.constraint(equalTo: viewForgotUsername.leftAnchor, constant: screenSizeWidth*0.09867).isActive = true
        imgBirthday.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.03599).isActive = true
        imgBirthday.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.0178668).isActive = true
    }

    func setupTxtClendar(){
        txtCalendar.borderStyle = .none
        txtCalendar.delegate = self
        txtCalendar.clearButtonMode = .whileEditing
        txtCalendar.font = UIFont(name: "OpenSans", size: 15)
        viewForgotUsername.addSubview(txtCalendar)
        txtCalendar.endEditing(true)
        txtCalendar.placeholder = "Birthday"
        txtCalendar.translatesAutoresizingMaskIntoConstraints = false
        txtCalendar.topAnchor.constraint(equalTo: viewBotNumCard.bottomAnchor, constant: screenSizeHeight*0.04888).isActive = true
        txtCalendar.leftAnchor.constraint(equalTo: imgBirthday.rightAnchor, constant: screenSizeWidth*0.0293).isActive = true
        txtCalendar.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.56).isActive = true
        txtCalendar.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.057).isActive = true
        txtCalendar.addTarget(self, action: #selector(setupBluView), for: UIControlEvents.editingDidBegin)
        txtCalendar.addTarget(self, action: #selector(done2), for: UIControlEvents.editingDidEnd)
        txtCalendar.addTarget(self, action: #selector(hideBlu), for: UIControlEvents.editingDidEndOnExit)
    }
        func setupBluView(){
        scrollView.addSubview(viewShadow)
        viewShadow.isHidden = false
        viewShadow.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.2)
        viewShadow.isOpaque = false

        viewShadow.translatesAutoresizingMaskIntoConstraints = false

        viewShadow.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor).isActive = true
        viewShadow.centerYAnchor.constraint(equalTo: scrollView.centerYAnchor).isActive = true
        viewShadow.widthAnchor.constraint(equalTo: scrollView.widthAnchor).isActive = true
        viewShadow.heightAnchor.constraint(equalToConstant: screenSizeHeight*2.5).isActive = true

        let g = UITapGestureRecognizer(target: self, action: #selector(hideBlu))
        g.numberOfTapsRequired = 1
        viewShadow.addGestureRecognizer(g)
    }
    func setupViewBotCalendar(){
        viewBotCalendar.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.2)
        viewForgotUsername.addSubview(viewBotCalendar)
        viewBotCalendar.translatesAutoresizingMaskIntoConstraints = false
        viewBotCalendar.centerXAnchor.constraint(equalTo: txtCalendar.centerXAnchor).isActive = true
        viewBotCalendar.bottomAnchor.constraint(equalTo: txtCalendar.bottomAnchor, constant: 0).isActive = true
        viewBotCalendar.widthAnchor.constraint(equalTo: txtCalendar.widthAnchor, multiplier: 1).isActive = true
        viewBotCalendar.heightAnchor.constraint(equalToConstant: 0.552).isActive = true
    }

    func setupRdbMobile2(){
        viewForgotUsername.addSubview(rdbMobile2)
        rdbMobile2.translatesAutoresizingMaskIntoConstraints = false
        rdbMobile2.select(animated: true)
        rdbMobile2.topAnchor.constraint(equalTo: viewBotCalendar.bottomAnchor, constant: 0.0444*screenSizeHeight).isActive = true
        rdbMobile2.leftAnchor.constraint(equalTo: viewForgotUsername.leftAnchor, constant: 0.09867*screenSizeWidth).isActive = true
        rdbMobile2.widthAnchor.constraint(equalToConstant: 0.0483*screenSizeWidth).isActive = true
        rdbMobile2.heightAnchor.constraint(equalToConstant: 0.0483*screenSizeWidth).isActive = true
            //rdbMobile
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbMobile2))
        click.numberOfTapsRequired = 1
        rdbMobile2.isUserInteractionEnabled = true
        rdbMobile2.addGestureRecognizer(click)
    }
    func setupLblRdbMobile2(){ //////
        lblRdbMobile2.text = "Mobile phone"
        lblRdbMobile2.adjustsFontSizeToFitWidth = true
        lblRdbMobile2.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        lblRdbMobile2.textAlignment = .center
        lblRdbMobile2.font = UIFont(name: "OpenSans-Semibold", size: 12)
        lblRdbMobile2.translatesAutoresizingMaskIntoConstraints = false
        viewForgotUsername.addSubview(lblRdbMobile2)

        lblRdbMobile2.topAnchor.constraint(equalTo: rdbMobile2.topAnchor, constant: 1.5).isActive = true
        lblRdbMobile2.leftAnchor.constraint(equalTo: rdbMobile2.rightAnchor, constant: 0.02133*screenSizeWidth).isActive = true
        lblRdbMobile2.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.1884).isActive = true
        lblRdbMobile2.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.01949).isActive = true
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbMobile2))
        click.numberOfTapsRequired = 1
        lblRdbMobile2.isUserInteractionEnabled = true
        lblRdbMobile2.addGestureRecognizer(click)
    }
    func setupRdbEmail2(){
        viewForgotUsername.addSubview(rdbEmail2)
        rdbEmail2.translatesAutoresizingMaskIntoConstraints = false
        rdbEmail2.centerYAnchor.constraint(equalTo: rdbMobile2.centerYAnchor).isActive = true
        rdbEmail2.leftAnchor.constraint(equalTo: lblRdbMobile2.rightAnchor, constant: 0.076932*screenSizeWidth).isActive = true
        rdbEmail2.widthAnchor.constraint(equalTo: rdbMobile2.widthAnchor).isActive = true
        rdbEmail2.heightAnchor.constraint(equalTo: rdbMobile2.heightAnchor).isActive = true
            //
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbEmail2))
        click.numberOfTapsRequired = 1
        rdbEmail2.isUserInteractionEnabled = true
        rdbEmail2.addGestureRecognizer(click)
    }
    func setupLblRdbEmail2(){
        lblRdbEmail2.text = "Email"
        lblRdbEmail2.textColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.3049871575)

        lblRdbEmail2.textAlignment = .center
        lblRdbEmail2.adjustsFontSizeToFitWidth = true
        lblRdbEmail2.font = UIFont(name: "OpenSans", size: 11)
        lblRdbEmail2.translatesAutoresizingMaskIntoConstraints = false
        viewForgotUsername.addSubview(lblRdbEmail2)

        lblRdbEmail2.topAnchor.constraint(equalTo: rdbEmail2.topAnchor, constant: 1.5).isActive = true
        lblRdbEmail2.leftAnchor.constraint(equalTo: rdbEmail2.rightAnchor, constant: 0.0213285*screenSizeWidth).isActive = true
        lblRdbEmail2.widthAnchor.constraint(equalToConstant: 0.074879*screenSizeWidth).isActive = true
        lblRdbEmail2.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.01949).isActive = true
        let click = UITapGestureRecognizer(target: self, action: #selector(isRdbEmail2))
        click.numberOfTapsRequired = 1
        lblRdbEmail2.isUserInteractionEnabled = true
        lblRdbEmail2.addGestureRecognizer(click)
    }

    func setupImgProtocol2(){
        viewForgotUsername.addSubview(imgProtocol2)
        imgProtocol2.translatesAutoresizingMaskIntoConstraints = false
        imgProtocol2.contentMode = .scaleToFill

        imgProtocol2.topAnchor.constraint(equalTo: imgBirthday.bottomAnchor, constant: screenSizeHeight*0.1207).isActive = true
        imgProtocol2.leftAnchor.constraint(equalTo: viewForgotUsername.leftAnchor, constant: screenSizeWidth*0.098).isActive = true
        imgProtocol2.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.02667).isActive = true
        imgProtocol2.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.0255).isActive = true
    }
    func setupTxtProtocol2(){
        txtProtocol2.borderStyle = .none
        txtProtocol2.placeholder = "Mobile phone"
        txtProtocol2.clearButtonMode = .whileEditing
        txtProtocol2.keyboardType = .numberPad
        txtProtocol2.font = UIFont(name: "OpenSans", size: 15)
        viewForgotUsername.addSubview(txtProtocol2)
        txtProtocol2.endEditing(true)
        txtProtocol2.translatesAutoresizingMaskIntoConstraints = false
        txtProtocol2.topAnchor.constraint(equalTo: viewBotCalendar.bottomAnchor, constant: 0.089837*screenSizeHeight).isActive = true
        txtProtocol2.leadingAnchor.constraint(equalTo: txtCalendar.leadingAnchor).isActive = true
        txtProtocol2.widthAnchor.constraint(equalTo: txtCalendar.widthAnchor).isActive = true
        txtProtocol2.heightAnchor.constraint(equalTo: txtCalendar.heightAnchor).isActive = true
        txtProtocol2.addTarget(self, action: #selector(showNextButton2), for: UIControlEvents.editingDidBegin)
        txtProtocol2.addTarget(self, action: #selector(done2), for: UIControlEvents.editingDidEnd)
        txtProtocol2.addTarget(self, action: #selector(editingProtocol2), for: UIControlEvents.editingChanged)
    }


    func setupViewBotProtocol2(){
        viewBotProtocol2.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.2)
        viewForgotUsername.addSubview(viewBotProtocol2)
        viewBotProtocol2.translatesAutoresizingMaskIntoConstraints = false
        viewBotProtocol2.centerXAnchor.constraint(equalTo: txtProtocol2.centerXAnchor).isActive = true
        viewBotProtocol2.topAnchor.constraint(equalTo: txtProtocol2.bottomAnchor, constant: 0).isActive = true
        viewBotProtocol2.widthAnchor.constraint(equalTo: txtProtocol2.widthAnchor, multiplier: 1).isActive = true
        viewBotProtocol2.heightAnchor.constraint(equalToConstant: 0.552).isActive = true

    }

    func setupLblError4(){
        lblError4.text = "Error message"
        lblError4.isHidden = true
        lblError4.textColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        lblError4.font = UIFont(name: "OpenSans", size: 11)
        lblError4.translatesAutoresizingMaskIntoConstraints = false
        viewForgotUsername.addSubview(lblError4)
        lblError4.topAnchor.constraint(equalTo: viewBotProtocol2.bottomAnchor, constant: screenSizeHeight*0.011).isActive = true

        lblError4.leadingAnchor.constraint(equalTo: viewBotProtocol2.leadingAnchor).isActive = true
        lblError4.widthAnchor.constraint(equalToConstant: 150).isActive = true
        lblError4.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.022488755622189).isActive = true

    }

    func setupImgNext2(){
        imgNext2.translatesAutoresizingMaskIntoConstraints = false
        viewForgotUsername.addSubview(imgNext2)
        imgNext2.contentMode = .scaleToFill
        imgNext2.isHidden = true
        imgNext2.rightAnchor.constraint(equalTo: viewForgotUsername.rightAnchor, constant: -screenSizeWidth*0.04).isActive = true
        imgNext2.topAnchor.constraint(equalTo: viewBotProtocol2.bottomAnchor, constant: screenSizeHeight*0.0225).isActive = true
        imgNext2.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.1333).isActive = true
        imgNext2.heightAnchor.constraint(equalToConstant: screenSizeWidth*0.1333).isActive = true

        let hold  = UILongPressGestureRecognizer(target: self, action: #selector(holdNext2(_:)))
        hold.numberOfTouchesRequired = 1
        hold.minimumPressDuration = 0.01
        imgNext2.isUserInteractionEnabled = true
        imgNext2.addGestureRecognizer(hold)
    }

    func setupImgSubmit2(){
        viewForgotUsername.addSubview(imgSubmit2)
        imgSubmit2.contentMode = .scaleAspectFit
        imgSubmit2.translatesAutoresizingMaskIntoConstraints = false
        
        imgSubmit2.centerXAnchor.constraint(equalTo: viewForgotUsername.centerXAnchor).isActive =  true
        imgSubmit2.bottomAnchor.constraint(equalTo: viewForgotUsername.bottomAnchor, constant: -0.03832*screenSizeHeight).isActive = true
        imgSubmit2.widthAnchor.constraint(equalToConstant: screenSizeWidth*0.7333333).isActive = true
        imgSubmit2.heightAnchor.constraint(equalToConstant: screenSizeHeight*0.068965).isActive = true

        let hold  = UILongPressGestureRecognizer(target: self, action: #selector(holdSubmit2))
        hold.numberOfTouchesRequired = 1
        hold.minimumPressDuration = 0.001
        imgSubmit2.isUserInteractionEnabled = true
        imgSubmit2.addGestureRecognizer(hold)

    }


    // MARK: - FUNC LOAD EVENT
    // Event text
    func done(){
        imgNext.isHidden = true
        imgSubmit.isHidden = false
    }

    func setNext(_ sender: UILongPressGestureRecognizer){         //  editingDidBegin

        imgNext.isHidden = false
        imgSubmit.isHidden = true

    }
    func setView(){         //  editingChanged
        HidenErrorDataforPass()
        if imgNext.isHidden == true {
            imgSubmit.isHidden = true
            imgNext.isHidden = false
        }
        if  txtUser.text! != "" {
            if !isValidEmail(testStr: txtUser.text!) {
                lblError1.text = "Email not exist"
                lblError1.isHidden = false
                imgUser.image = #imageLiteral(resourceName: "user_error")
                viewBotUser.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
            }else{
                HidenErrorDataforPass()
                imgUser.image = #imageLiteral(resourceName: "user")
                viewBotUser.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)
            }
        }else{
            lblError1.text = "User Name is Empty"
            lblError1.isHidden = false
            imgUser.image = #imageLiteral(resourceName: "user_error")
            viewBotUser.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        }

    }
    func setView2(){
        HidenErrorDataforPass()
        if imgNext.isHidden == true {
            imgNext.isHidden = false
            imgSubmit.isHidden = true
        }

        if rdbEmail.isSelected == true {
            if isValidEmail(testStr: txtProtocol.text!) {
                lblError2.isHidden = true
            }else{
                lblError2.text = "Email not exist"
                lblError2.isHidden = false
                imgProtocol.image = #imageLiteral(resourceName: "smartphone_error")
                viewBotProtocol.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
            }
        }else{
            
            if (txtProtocol.text?.characters.count)! != 0{
//                guard Int(txtProtocol.text!) != nil else{
//                    lblError2.text = "Number phone not exist"
//                    lblError2.isHidden = false
//                    imgProtocol.image = #imageLiteral(resourceName: "smartphone_error")
//                    viewBotProtocol.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
//                    return
//                }
                let c = txtProtocol.text?.characters.count
                guard c! >= 10 && c! <= 12 else{
                    lblError2.text = "Number phone not exist"
                    lblError2.isHidden = false
                    imgProtocol.image = #imageLiteral(resourceName: "smartphone_error")
                    viewBotProtocol.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
                    return
                }
                lblError2.isHidden = true
                imgProtocol.image = #imageLiteral(resourceName: "smartphone (1)")
                viewBotProtocol.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)

            } else{
                lblError2.text = "Number phone is empty"
                lblError2.isHidden = false
                imgProtocol.image = #imageLiteral(resourceName: "smartphone_error")
                viewBotProtocol.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)

            }
        }
    }
    func editingChangeOffError(){
//        if lblError3.isHidden == false{
//            HidenErrorDataforUser()
//        }
        if imgNext2.isHidden == true {
            imgNext2.isHidden = false
            imgSubmit2.isHidden = true
        }
        if txtNumCard.text?.characters.count != 0{
            guard Int(txtNumCard.text!) != nil else {
                lblError3.text = "Error License"
                lblError3.isHidden = false
                viewBotNumCard.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
                imgNumCard.image = #imageLiteral(resourceName: "id-card_error")
                return
            }
            guard txtNumCard.text?.characters.count == 9 else {
                lblError3.text = "Error License"
                lblError3.isHidden = false
                viewBotNumCard.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
                imgNumCard.image = #imageLiteral(resourceName: "id-card_error")
                return
            }
            lblError3.isHidden = true
            viewBotNumCard.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)
            imgNumCard.image = #imageLiteral(resourceName: "id-card")

        }else{
            lblError3.text = "License is Empty"
            lblError3.isHidden = false
            viewBotNumCard.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
            imgNumCard.image = #imageLiteral(resourceName: "id-card_error")
        }


    }
    func showNextButton(){
        imgNext2.isHidden = false
        imgSubmit2.isHidden = true
    }
    func done2(){
        if imgNext2.isHidden == false {
            imgNext2.isHidden = true
            imgSubmit2.isHidden = false
        }

    }
    //(Done)
    func holdNext(_ sender: UILongPressGestureRecognizer){
        imgNext.image = #imageLiteral(resourceName: "btn_next_selected")
        if txtUser.text != "" && txtProtocol.text == ""{
            txtProtocol.becomeFirstResponder()
            txtProtocol.keyboardType = .numberPad
            imgSubmit.isHidden = true
            imgNext.isHidden = false
        }
        if txtUser.text == "" && txtProtocol.text != "" {
            txtUser.becomeFirstResponder()
            imgSubmit.isHidden = true
            imgNext.isHidden = false
        }
        if txtUser.text != "" && txtProtocol.text != ""{

            if sender.state == .ended{
                presenter?.getDataPass(userName: txtUser.text!, kindOfSecurity: txtProtocol.text!, isEmail: rdbEmail.isSelected)
                imgSubmit.isHidden = true
                imgNext.isHidden = false
                imgNext.image = #imageLiteral(resourceName: "btn_next")
                txtProtocol.endEditing(true)
            }
        }
        if txtUser.text == "" && txtProtocol.text == "" {

            imgNext.image = #imageLiteral(resourceName: "btn_next")
            txtUser.becomeFirstResponder()
            imgSubmit.isHidden = true
            imgNext.isHidden = false

        }
        if sender.state == .ended {
            imgNext.image = #imageLiteral(resourceName: "btn_next")
            //            imgSubmit.isHidden = true
            //            imgNext.isHidden = false
        }
        
    }
    func holdNext2(_ sender: UILongPressGestureRecognizer){
        imgNext2.image = #imageLiteral(resourceName: "btn_next_selected")
        if txtNumCard.text != "" && txtProtocol2.text == ""{
            txtProtocol2.becomeFirstResponder()
            txtProtocol2.keyboardType = .numberPad
            imgSubmit2.isHidden = true
            imgNext2.isHidden = false
        }
        if txtCalendar.text == "" && txtNumCard.text != ""{
            txtCalendar.becomeFirstResponder()
            imgSubmit2.isHidden = true
            imgNext2.isHidden = false
        }
        if txtCalendar.text != "" && txtNumCard.text == ""{
            txtNumCard.becomeFirstResponder()
            imgSubmit2.isHidden = true
            imgNext2.isHidden = false
        }
        if txtCalendar.text != "" && txtNumCard.text != "" && txtProtocol2.text == ""{
            txtProtocol2.becomeFirstResponder()
            imgSubmit2.isHidden = true
            imgNext2.isHidden = false
        }
        if txtNumCard.text == "" && txtProtocol2.text != "" {
            txtNumCard.becomeFirstResponder()
            imgSubmit2.isHidden = true
            imgNext2.isHidden = false
        }
        if txtNumCard.text != "" && txtProtocol2.text != ""{

            if sender.state == .ended{
                presenter?.getDataUser(cmnd: txtNumCard.text!, birthday: txtCalendar.text!, kindOfSecurity: txtProtocol2.text!, isEmail: rdbEmail2.isSelected)
                imgSubmit2.isHidden = false
                imgNext2.isHidden = true
                imgNext2.image = #imageLiteral(resourceName: "btn_next")
                txtProtocol2.endEditing(true)
            }
        }
        if txtNumCard.text == "" && txtProtocol2.text == "" {

            imgNext2.image = #imageLiteral(resourceName: "btn_next")
            txtNumCard.becomeFirstResponder()
            imgSubmit2.isHidden = true
            imgNext2.isHidden = false

        }
        if sender.state == .ended {
            imgNext2.image = #imageLiteral(resourceName: "btn_next")
            imgNext2.isHidden = false
            imgSubmit2.isHidden = true
        }

    }
    func editingProtocol2(){
        if lblError3.isHidden == false {
            HidenErrorDataforUser()
        }
        if imgNext2.isHidden == true {
            imgNext2.isHidden = false
            imgSubmit2.isHidden = true
        }
        if rdbEmail2.isSelected == true {
            if txtProtocol2.text?.characters.count == 0{
                lblError4.text = "Email is empty"
                lblError4.isHidden = false
                imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
                viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)

            }
            if !isValidEmail(testStr: txtProtocol2.text!) {
                lblError4.text = "Email not exist"
                lblError4.isHidden = false
                imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
                viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)

            }
            else{
                lblError4.isHidden = true
                imgProtocol2.image = #imageLiteral(resourceName: "smartphone (1)")
                viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)

            }
        }else{
            if txtProtocol2.text?.characters.count == 0{
                lblError4.text = "Number phone is empty"
                lblError4.isHidden = false
                imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
                viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
                HidenErrorDataforUser()

            }
            if (txtProtocol2.text?.characters.count)! >= 10 && (txtProtocol2.text?.characters.count)! <= 12{
//                if Int(txtProtocol2.text!) == nil {
//                    lblError4.text = "Number phone not exist"
//                    lblError4.isHidden = false
//                    imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
//                    viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
//                }else{
                    lblError4.isHidden = true
                    imgProtocol2.image = #imageLiteral(resourceName: "smartphone (1)")
                    viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)

                //}
            }
            else{
                lblError4.text = "Number phone not exist"
                lblError4.isHidden = false
                imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
                viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)

            }


        }

    }
    func showNextButton2(){
        if imgNext2.isHidden == true{
            imgNext2.isHidden = false
            imgSubmit2.isHidden = true
        }
    }
    //Event  Radio Button
    func isRdbMobile(){
        txtProtocol.endEditing(true)
        txtProtocol.text = ""
        rdbEmail.deselect()
        lblError2.isHidden = true
        txtProtocol.keyboardType = .numberPad
        txtProtocol.placeholder = "Phone Number"
        txtProtocol.becomeFirstResponder()
        txtProtocol.autocorrectionType = .no
        rdbMobile.select(animated: true)
        lblRdbMobile.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        lblRdbMobile.font = UIFont(name: "OpenSans-Semibold", size: 11)
        lblRdbEmail.textColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        lblRdbEmail.font = UIFont(name: "OpenSans", size: 11)
        imgProtocol.image = #imageLiteral(resourceName: "smartphone (1)")
        viewBotProtocol.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)

    }
    func isRdbEmail(){
         txtProtocol.endEditing(true)
        txtProtocol.text = ""
        rdbMobile.deselect()
        lblError2.isHidden = true
        txtProtocol.keyboardType = .emailAddress
        txtProtocol.placeholder = "Email"
        txtProtocol.becomeFirstResponder()
        txtProtocol.autocorrectionType = .no
        rdbEmail.select(animated: true)
        imgProtocol.image = #imageLiteral(resourceName: "smartphone (1)")
        viewBotProtocol.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)
        lblRdbMobile.textColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        lblRdbMobile.font = UIFont(name: "OpenSans", size: 11)
        lblRdbEmail.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        lblRdbEmail.font = UIFont(name: "OpenSans-Semibold", size: 11)
    }
    func isRdbMobile2(){
        txtProtocol2.endEditing(true)
        rdbMobile2.select(animated: true)
        rdbEmail2.deselect()
        txtProtocol2.text = ""
        lblError4.isHidden = true
        txtProtocol2.placeholder = "Phone Number"
        txtProtocol2.keyboardType = .numberPad
        txtProtocol2.becomeFirstResponder()
        txtProtocol2.autocorrectionType = .no
        lblRdbMobile2.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        lblRdbMobile2.font = UIFont(name: "OpenSans-Semibold", size: 11)
        lblRdbEmail2.textColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        lblRdbEmail2.font = UIFont(name: "OpenSans", size: 11)
        imgProtocol2.image = #imageLiteral(resourceName: "smartphone (1)")
        viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)
    }
    func isRdbEmail2(){
        txtProtocol2.endEditing(true)
        txtProtocol2.placeholder = "Email"
        txtProtocol2.keyboardType = .emailAddress
        txtProtocol2.text = ""
        txtProtocol2.becomeFirstResponder()
        txtProtocol2.autocorrectionType = .no
        rdbEmail2.select(animated: true)
        lblError4.isHidden = true

        rdbMobile2.deselect()
        lblRdbMobile2.textColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        lblRdbMobile2.font = UIFont(name: "OpenSans", size: 11)
        lblRdbEmail2.textColor = #colorLiteral(red: 0.09411764706, green: 0.8, blue: 0.5137254902, alpha: 1)
        lblRdbEmail2.font = UIFont(name: "OpenSans-Semibold", size: 11)
        imgProtocol2.image = #imageLiteral(resourceName: "smartphone (1)")
        viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.06274510175, green: 0, blue: 0.1921568662, alpha: 0.2)
    }
    //(Done)
    func holdSubmit2(sender: UILongPressGestureRecognizer){
        imgSubmit2.image = #imageLiteral(resourceName: "btn_white_selected")
        if sender.state == .ended{
            imgSubmit2.image = #imageLiteral(resourceName: "btn_white")
            presenter?.getDataUser(cmnd: txtNumCard.text!, birthday: txtCalendar.text!, kindOfSecurity: txtProtocol2.text!, isEmail: rdbEmail2.isSelected)
        }
    }
    func holdSubmit(sender: UILongPressGestureRecognizer){
        imgSubmit.image = #imageLiteral(resourceName: "btn_white_selected")
        if sender.state == .ended{
            presenter?.getDataPass(userName: txtUser.text!, kindOfSecurity: txtProtocol.text!, isEmail: rdbEmail.isSelected)
            imgSubmit.image = #imageLiteral(resourceName: "btn_white")

        }
    }

    func getRespondForUser(result: Bool) {
        if result {
            DispatchQueue.main.async {
                self.loadViewSuccessUserName()
                self.HidenErrorDataforUser()
            }
        }else{
            DispatchQueue.main.async {
                self.showErrorDataforUser()
            }

        }
    }

    func getRespondForPass(result: Bool) {
        if result {
            DispatchQueue.main.async {
                self.loadViewSuccessPassword()
            }

        }else{
            DispatchQueue.main.async {
                self.showErrorDataforPass()
            }
        }
    }

    func showErrorDataforPass(){
        lblError1.isHidden = false
        lblError2.isHidden = false
        viewBotUser.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        viewBotProtocol.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        imgUser.image = #imageLiteral(resourceName: "user_error")
        imgProtocol.image = #imageLiteral(resourceName: "smartphone_error")
    }
    func HidenErrorDataforPass(){
        lblError1.isHidden = true
        lblError2.isHidden = true
        viewBotUser.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        viewBotProtocol.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        imgSubmit.image = #imageLiteral(resourceName: "btn_white")
        imgUser.image = #imageLiteral(resourceName: "user")
        imgProtocol.image = #imageLiteral(resourceName: "smartphone (1)")
    }

    //???:  Custom view Error
    func showErrorDataforUser(){
        lblError3.isHidden = false
        lblError4.isHidden = false
        viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        viewBotNumCard.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
        imgNumCard.image = #imageLiteral(resourceName: "id-card_error")
    }
    func HidenErrorDataforUser(){
        lblError3.isHidden = false
        lblError4.isHidden = false
        viewBotProtocol2.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        viewBotNumCard.backgroundColor = #colorLiteral(red: 0.9387038946, green: 0.4939151406, blue: 0, alpha: 1)
        imgProtocol2.image = #imageLiteral(resourceName: "smartphone_error")
        imgNumCard.image = #imageLiteral(resourceName: "id-card_error")
    }
    func loadViewSuccessPassword() {
        scrollView.addSubview(viewNew)
        viewNew.translatesAutoresizingMaskIntoConstraints = false
        viewNew.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor).isActive = true
        viewNew.topAnchor.constraint(equalTo: scrollView.topAnchor,constant: UIScreen.main.bounds.height*0.04274).isActive = true
        viewNew.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.86667).isActive = true
        viewNew.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.71625).isActive = true
        //viewNew.isHidden = true
        viewNew.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)


        viewNew.addSubview(imgSuccessPass)
        imgSuccessPass.image = #imageLiteral(resourceName: "Success_pass")
        imgSuccessPass.translatesAutoresizingMaskIntoConstraints = false
        imgSuccessPass.topAnchor.constraint(equalTo: viewNew.topAnchor, constant: 0.155*screenSizeHeight).isActive = true
        imgSuccessPass.centerXAnchor.constraint(equalTo: viewNew.centerXAnchor).isActive
         = true
        imgSuccessPass.widthAnchor.constraint(equalToConstant: 0.7*screenSizeWidth).isActive = true
        imgSuccessPass.heightAnchor.constraint(equalToConstant: 0.2486*screenSizeHeight).isActive = true
        imgSuccessPass.contentMode = .scaleAspectFit
        viewNew.addSubview(imgBackLogin)
        imgBackLogin.image = #imageLiteral(resourceName: "btnBackLogin")
        imgBackLogin.translatesAutoresizingMaskIntoConstraints = false
        imgBackLogin.bottomAnchor.constraint(equalTo: viewNew.bottomAnchor, constant: -0.06334*screenSizeHeight).isActive = true
        imgBackLogin.centerXAnchor.constraint(equalTo: viewNew.centerXAnchor).isActive = true
        imgBackLogin.widthAnchor.constraint(equalToConstant: 0.288*screenSizeWidth).isActive = true
        imgBackLogin.heightAnchor.constraint(equalToConstant: 0.025*screenSizeHeight).isActive = true
        imgBackLogin.contentMode = .scaleAspectFit
        let hold  = UILongPressGestureRecognizer(target: self, action: #selector(backLogin))
        hold.numberOfTouchesRequired = 1
        hold.minimumPressDuration = 0.001
        imgBackLogin.isUserInteractionEnabled = true
        imgBackLogin.addGestureRecognizer(hold)
        
    }
    func backLogin(sender: UILongPressGestureRecognizer){
        imgBackLogin.image = #imageLiteral(resourceName: "BackLogin2")
        imgBackLogin2.image = #imageLiteral(resourceName: "BackLogin2")
        if sender.state == .ended{
            presenter?.loadLogin()
            imgBackLogin.image = #imageLiteral(resourceName: "btnBackLogin")
            imgBackLogin2.image = #imageLiteral(resourceName: "btnBackLogin")
        }
    }

    func loadViewSuccessUserName(){
        viewForgotUsername.addSubview(viewNew2)
        viewNew2.translatesAutoresizingMaskIntoConstraints = false
        viewNew2.centerXAnchor.constraint(equalTo: viewForgotUsername.centerXAnchor).isActive = true
        viewNew2.centerYAnchor.constraint(equalTo: viewForgotUsername.centerYAnchor).isActive = true
        viewNew2.widthAnchor.constraint(equalTo: viewForgotUsername.widthAnchor).isActive = true
        viewNew2.heightAnchor.constraint(equalTo: viewForgotUsername.heightAnchor).isActive = true
        viewNew2.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
        //
        viewNew2.addSubview(imgSuccessUser)
        imgSuccessUser.translatesAutoresizingMaskIntoConstraints = false
        imgSuccessUser.image = #imageLiteral(resourceName: "Success_pass")
        imgSuccessUser.contentMode = .scaleToFill
        imgSuccessUser.centerXAnchor.constraint(equalTo: viewNew2.centerXAnchor).isActive = true
        imgSuccessUser.topAnchor.constraint(equalTo: viewNew2.topAnchor, constant:0.155*screenSizeHeight).isActive = true
        imgSuccessUser.widthAnchor.constraint(equalToConstant: 0.7*screenSizeWidth).isActive = true
        imgSuccessUser.heightAnchor.constraint(equalToConstant: 0.2486*screenSizeHeight).isActive = true

        viewNew2.addSubview(imgBackLogin2)
        imgBackLogin2.translatesAutoresizingMaskIntoConstraints = false
        imgBackLogin2.contentMode = .scaleToFill
        imgBackLogin2.image = #imageLiteral(resourceName: "btnBackLogin")
        imgBackLogin2.bottomAnchor.constraint(equalTo: viewNew2.bottomAnchor, constant: -0.06334*screenSizeHeight).isActive = true
        imgBackLogin2.centerXAnchor.constraint(equalTo: viewNew2.centerXAnchor).isActive = true
        imgBackLogin2.widthAnchor.constraint(equalToConstant: 0.288*screenSizeWidth).isActive = true
        imgBackLogin2.heightAnchor.constraint(equalToConstant: 0.025*screenSizeHeight).isActive = true
        let hold  = UILongPressGestureRecognizer(target: self, action: #selector(backLogin))
        hold.numberOfTouchesRequired = 1
        hold.minimumPressDuration = 0.001
        imgBackLogin2.isUserInteractionEnabled = true

        imgBackLogin2.addGestureRecognizer(hold)
    }

    func hideBlu(){
        viewShadow.isHidden = true
        txtCalendar.endEditing(true)
    }

    func popScrollView(){
        scrollView.scrollsToTop = true
        scrollView.setContentOffset(CGPoint(x: 0, y: 0), animated: true)
        print("sddsvs")
    }
    // MARK: - DELEGATE SCROLLVIEW
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let padMidContentOffsetY = scrollView.contentSize.height/3

        if scrollView.contentOffset.y >= padMidContentOffsetY{
            imgSubmit.isHidden = true
            imgPopupScroll.isHidden = false
            self.dismissKeyboard()

        }else{
            imgSubmit.isHidden = false
            imgPopupScroll.isHidden = true
        }
    }
    func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {

        imgNext.isHidden = true
    }
    func scrollViewDidScrollToTop(_ scrollView: UIScrollView) {
        if scrollView.scrollsToTop{
            imgSubmit.isHidden = false
            imgNext.isHidden = true
        }
    }
    // MARK: DELEGATE TEXTFIELD
    func dismissKeyboard() {
        view.endEditing(true)
    }


    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {

        //1. To make sure that this is applicable to only particular textfield add tag.
        if txtCalendar.tag == 1 {
            //2. this one helps to make sure that user enters only numeric characters and '-' in fields
            let numbersOnly = CharacterSet(charactersIn: "1234567890-")

            let Validate = string.rangeOfCharacter(from: numbersOnly.inverted) == nil ? true : false
            if !Validate {
                return false;
            }
            if range.length + range.location > (txtCalendar.text?.characters.count)! {
                return false
            }
            let newLength = (txtCalendar.text?.characters.count)! + string.characters.count - range.length
            if newLength == 3 || newLength == 6 {
                let  char = string.cString(using: String.Encoding.utf8)!
                let isBackSpace = strcmp(char, "\\b")

                if (isBackSpace == -92) {
                    dateFormate = false;
                }else{
                    dateFormate = true;
                }

                if dateFormate {
                    let textContent:String!
                    textContent = txtCalendar.text
                    //3.Here we add '-' on overself.
                    let textWithHifen:NSString = "\(textContent)-" as NSString
                    txtCalendar.text = textWithHifen as String
                    dateFormate = false
                }
            }
            //4. this one helps to make sure only 8 character is added in textfield .(ie: dd-mm-yy)
            return newLength <= 8;

        }


        return true
    }
    func textFieldDidBeginEditing(_ textField: UITextField) {
        let datePickerView:UIDatePicker = UIDatePicker()
        datePickerView.datePickerMode = UIDatePickerMode.date
        let currentDate = NSDate()
        datePickerView.maximumDate = currentDate as Date
        datePickerView.date = currentDate as Date
        datePickerView.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
        self.txtCalendar.inputView = datePickerView
        datePickerView.addTarget(self, action: #selector(datePickerValueChanged(sender:)), for: .valueChanged)
    }

    func datePickerValueChanged(sender:UIDatePicker) {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = DateFormatter.Style.long
        txtCalendar.text = dateFormatter.string(from: sender.date)
        stringToDate()
    }

    func stringToDate(){
        let dateString = txtCalendar.text!
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMM dd,yyyy"
        dateFormatter.locale = Locale.init(identifier: "en_GB")
        let dateObj = dateFormatter.date(from: dateString)
        dateFormatter.dateFormat = "MMM dd,yyyy"

        let since1970 = (dateObj?.timeIntervalSince1970)! * 1000
        let toUInt64 = String(Int64(since1970))
        var dateOfBirth = ""
        dateOfBirth.append(toUInt64)


    }
    func isValidEmail(testStr:String) -> Bool {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        let emailTest = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        let result = emailTest.evaluate(with: testStr)
        return result
    }

}
